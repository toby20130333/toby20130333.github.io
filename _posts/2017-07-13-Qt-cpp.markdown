---
layout:     post
title:      "如何成为一个C++高级程序员(转载)"
subtitle:   " \"Being A Senior Programmer \""
date:       2017-07-13
author:     "Tobyyi"
header-img: "http://qtddui.b0.upaiyun.com/gitdir/wordto.jpg"
catalog:    true
tags:
    - C++
    - Qt
    - senior programmer
---

>  如何成为一个C++高级程序员

> <br/>

>  加油吧 骚年

### 前言

* C++这门语言从诞生到今天已经经历了将近30个年头。不可否认，它的学习难度都比其它语言较高。而它的学习难度，主要来自于它的复杂性。现在 C++ 的使用范围比以前已经少了很多,JavaScript、java、C#、python 等语言在很多方面已经可以代替C++。但是也有很多地方是其他语言完全无法替代的，主要集中在需要运行效率比较高的行业，比如游戏、高效的服务器。

* 现在学习 java、C#等语言的人数远远高于C++，主要是 C++ 的入门门槛太高，可能学习了一段时间后还做不了什么东西，导致信心大受打击，进而放弃。

* 我想把我自己的经验分享给大家，希望帮助新人少走些弯路,在此我们不讨论具体的技术细节，只说我们应该学习什么东西 

###  技术能力

* 语言

我们要成为一个程序员，学的东西会很多很杂，但是最开始一定要从语言开始学习，而学习语言最关键的莫过于选好一本书，学校的教材就算了，根本没 有写得好的。在此隆重推荐《C++ Primer》，这本书很厚，内容也很丰富，对知识的讲解不仅仅停留在表面。如果这本书能有耐心看完，语言方面基本就没有什么大问题了，对以后的学习也打 下了一个很好的基础。

* GUI

C++方面的 GUI 库有很多种，比如 Qt、MFC、WTL、wxWidgets。这些 GUI 库都各有自己的特点，其实我们只要先了解一种就可以了，只要深入了解了一种 GUI 库，需要的时候再学习其他的就够了，本质上都差不多，很快就可以上手了。MFC 虽然设计上有很多问题，但是作为入门还是不错的，而且学习资料很多，碰到问题也好解决。我个人推荐Qt这个跨平台的GUI框架，入门也比较低，文档比较丰富，而且Qt官方一直在更新。

* 数据结构和算法

很多人都忽视了数据结构和算法方面的知识，尤其是一些编程语言的库做得非常好，几乎不需要自己去实现一些数据结构和算法，导致现在很多程序员不 重视甚至忽略这方面的知识。但是，当我们想让我们的程序跑的更快、内存占用更少的时候，这些知识就非常非常重要了。很多程序员都是刚开始的时候不重视这 些，但是工作几年后又来补习这些知识。
最开始可能不需要学习的太深入，但是基本的数据结构和算法一定要知道。
推荐《数据结构（C语言版）》，在数据结构和算法的学习中，最好不要去关心面向对象方面的技巧，就用C语言来实现，这样能更关注于算法本身的内容。

* 数据库

学习数据库的基础知识，并且掌握一种数据库使用，推荐使用 sqlite,文件数据库，开发环境简单易搭建，而且最好不要用一些封装好的接口，而应该直接用 sqlite提供的数据库 api，可能对数据库了解的会更深入。

* 并行

cpu 主频已经不能遵循摩尔定律了，现在 cpu 发展的趋势是多核心。无论是多线程，还是多进程，都是为了更好的利用 cpu 的性能，提供更好的用户体验。这就要求我们如果要写出高效的应用程序，必然要涉及到并行计算。多花些精力在并行计算上吧，一定会有丰富的回报。

* 网络编程

这里所指的网络编程是指 socket 编程。现在 C++ 的应用很多都是在做服务器开发，如何开发一个高并发、大吞吐量、高稳定性的服务器就是我们要考虑的了。目前http、https、websocket等网络协议已经非常成熟而且都有各自发挥的领域。

* 设计模式

设计模式不是具体的技术，更多的是如何让代码更容易阅读、更好扩展、更容易使用。

* 库的使用

C++标准库仅仅提供了一些很基本的功能，所以我们经常会引入一些第三方库。最著名的恐怕就是被称为准标准库的 boost 库，它提供了我们编程中用到的各方面的技术，文本处理、算法、网络、多线程、图像处理等等，几乎无所不包。其它也有一些专著于某一方面的库，比如 ACE 是网络通信方面的，TinyXML 是解析 xml 的，OGRE 是图形渲染方面的。

* 操作系统的知识

程序员需要了解的操作系统知识和普通用户是不一样的，一个高手是需要深入了解操作系统的方方面面，而不是停留在使用层面。至于应该了解哪些知 识，windows 上的去看《Windows 核心编程》，linux 的去看《深入理解 linux 内核》，应该可以知道自己应该学什么了。

* 开源

事实上开源不仅仅代表软件源代码的开放，开源本身即意味着自由、共享和充分利用资源,而开源更是一种文化,一种精神，国外开源精神是非常不错，也诞生了很多开源的且流行的开发框架，鉴于开源精神，全民参与，方可让科技更近一尺。

### 项目经验

* 以上的内容如果都精通了(当然我都没有精通)，也算是个比较厉害的程序员。但是对程序员来说，项目经验更加重要。一个好的项目可以让你把各种技术进行综合运用，并且能学到一些新的知识。比如说做游戏的就需要学习图形方面的知识，做播放器的要学习编解码器方面的知识。

* 很多程序员会忽略项目的经验，而单纯的谈技术能力，这是错误的。其实这就是理论和实践的关系，技术就是理论知识，做项目就是实践，理论对实践有知道作用，实践能加深我们对理论的深入理解。
* 项目经验积累，可以为之后的项目打下坚实的基础。

### 沟通能力

* 沟通能力是一个高级程序员要具备的软实力。

* 我这里想说的沟通能力并不是一般说的能说会道，夸夸其谈，说话天花乱坠。而是建立在技术基础之上的沟通能力